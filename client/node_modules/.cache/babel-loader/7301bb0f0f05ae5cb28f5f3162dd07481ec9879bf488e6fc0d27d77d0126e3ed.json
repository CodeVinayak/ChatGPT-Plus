{"ast":null,"code":"import _regeneratorRuntime from\"D:/Coding/Github Local/ChatGPT Plus/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"D:/Coding/Github Local/ChatGPT Plus/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _objectSpread from\"D:/Coding/Github Local/ChatGPT Plus/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"D:/Coding/Github Local/ChatGPT Plus/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"D:/Coding/Github Local/ChatGPT Plus/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from'react';import axios from\"axios\";import PromptInput from\"../PromptInput/PromptInput\";import'./App.css';import PromptResponseList from\"../PromptResponseList/PromptResponseList\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),responseList=_useState2[0],setResponseList=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),prompt=_useState4[0],setPrompt=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),promptToRetry=_useState6[0],setPromptToRetry=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),uniqueIdToRetry=_useState8[0],setUniqueIdToRetry=_useState8[1];var _useState9=useState('gpt'),_useState10=_slicedToArray(_useState9,2),modelValue=_useState10[0],setModelValue=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),isLoading=_useState12[0],setIsLoading=_useState12[1];var loadInterval;var generateUniqueId=function generateUniqueId(){var timestamp=Date.now();var randomNumber=Math.random();var hexadecimalString=randomNumber.toString(16);return\"id-\".concat(timestamp,\"-\").concat(hexadecimalString);};var htmlToText=function htmlToText(html){var temp=document.createElement('div');temp.innerHTML=html;return temp.textContent;};var delay=function delay(ms){return new Promise(function(resolve){return setTimeout(resolve,ms);});};var addLoader=function addLoader(uid){var element=document.getElementById(uid);element.textContent='';// @ts-ignore\nloadInterval=setInterval(function(){// Update the text content of the loading indicator\nelement.textContent+='.';// If the loading indicator has reached three dots, reset it\nif(element.textContent==='....'){element.textContent='';}},300);};var addResponse=function addResponse(selfFlag,response){var uid=generateUniqueId();setResponseList(function(prevResponses){return[].concat(_toConsumableArray(prevResponses),[{id:uid,response:response,selfFlag:selfFlag}]);});return uid;};var updateResponse=function updateResponse(uid,updatedObject){setResponseList(function(prevResponses){var updatedList=_toConsumableArray(prevResponses);var index=prevResponses.findIndex(function(response){return response.id===uid;});if(index>-1){updatedList[index]=_objectSpread(_objectSpread({},updatedList[index]),updatedObject);}return updatedList;});};var regenerateResponse=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return getGPTResult(promptToRetry,uniqueIdToRetry);case 2:case\"end\":return _context.stop();}},_callee);}));return function regenerateResponse(){return _ref.apply(this,arguments);};}();var getGPTResult=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_promptToRetry,_uniqueIdToRetry){var _prompt,uniqueId,response;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:// Get the prompt input\n_prompt=_promptToRetry!==null&&_promptToRetry!==void 0?_promptToRetry:htmlToText(prompt);// If a response is already being generated or the prompt is empty, return\nif(!(isLoading||!_prompt)){_context2.next=3;break;}return _context2.abrupt(\"return\");case 3:setIsLoading(true);// Clear the prompt input\nsetPrompt('');if(!_uniqueIdToRetry){_context2.next=9;break;}uniqueId=_uniqueIdToRetry;_context2.next=14;break;case 9:// Add the self prompt to the response list\naddResponse(true,_prompt);uniqueId=addResponse(false);_context2.next=13;return delay(50);case 13:addLoader(uniqueId);case 14:_context2.prev=14;_context2.next=17;return axios.post('get-prompt-result',{prompt:_prompt,model:modelValue});case 17:response=_context2.sent;if(modelValue==='image'){// Show image for `Create image` model\nupdateResponse(uniqueId,{image:response.data});}else{updateResponse(uniqueId,{response:response.data.trim()});}setPromptToRetry(null);setUniqueIdToRetry(null);_context2.next=28;break;case 23:_context2.prev=23;_context2.t0=_context2[\"catch\"](14);setPromptToRetry(_prompt);setUniqueIdToRetry(uniqueId);updateResponse(uniqueId,{// @ts-ignore\nresponse:\"Error: \".concat(_context2.t0.message),error:true});case 28:_context2.prev=28;// Clear the loader interval\nclearInterval(loadInterval);setIsLoading(false);return _context2.finish(28);case 32:case\"end\":return _context2.stop();}},_callee2,null,[[14,23,28,32]]);}));return function getGPTResult(_x,_x2){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"div\",{id:\"response-list\",children:/*#__PURE__*/_jsx(PromptResponseList,{responseList:responseList},\"response-list\")}),uniqueIdToRetry&&/*#__PURE__*/_jsx(\"div\",{id:\"regenerate-button-container\",children:/*#__PURE__*/_jsx(\"button\",{id:\"regenerate-response-button\",className:isLoading?'loading':'',onClick:function onClick(){return regenerateResponse();},children:\"Regenerate Response\"})}),/*#__PURE__*/_jsxs(\"div\",{id:\"model-select-container\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"model-select\",children:\"Select model:\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"model-select\",value:modelValue,onChange:function onChange(event){return setModelValue(event.target.value);},children:[/*#__PURE__*/_jsx(\"option\",{value:\"gpt\",children:\"GPT-3 (Understand and generate natural language )\"}),/*#__PURE__*/_jsx(\"option\",{value:\"image\",children:\"Create Image (Create AI image using DALL\\xB7E models)\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{id:\"input-container\",children:[/*#__PURE__*/_jsx(PromptInput,{prompt:prompt,onSubmit:function onSubmit(){return getGPTResult();},updatePrompt:function updatePrompt(prompt){return setPrompt(prompt);}},\"prompt-input\"),/*#__PURE__*/_jsx(\"button\",{id:\"submit-button\",className:isLoading?'loading':'',onClick:function onClick(){return getGPTResult();}})]})]});};export default App;","map":{"version":3,"names":["useState","axios","PromptInput","PromptResponseList","App","responseList","setResponseList","prompt","setPrompt","promptToRetry","setPromptToRetry","uniqueIdToRetry","setUniqueIdToRetry","modelValue","setModelValue","isLoading","setIsLoading","loadInterval","generateUniqueId","timestamp","Date","now","randomNumber","Math","random","hexadecimalString","toString","htmlToText","html","temp","document","createElement","innerHTML","textContent","delay","ms","Promise","resolve","setTimeout","addLoader","uid","element","getElementById","setInterval","addResponse","selfFlag","response","prevResponses","id","updateResponse","updatedObject","updatedList","index","findIndex","regenerateResponse","getGPTResult","_promptToRetry","_uniqueIdToRetry","_prompt","uniqueId","post","model","image","data","trim","message","error","clearInterval","event","target","value"],"sources":["D:/Coding/Github Local/ChatGPT Plus/client/src/components/App/App.tsx"],"sourcesContent":["import {useState} from 'react';\nimport axios from \"axios\";\nimport PromptInput from \"../PromptInput/PromptInput\";\nimport './App.css';\nimport {ResponseInterface} from \"../PromptResponseList/response-interface\";\nimport PromptResponseList from \"../PromptResponseList/PromptResponseList\";\n\ntype ModelValueType = 'gpt' | 'image';\nconst App = () => {\n\n  const [responseList, setResponseList] = useState<ResponseInterface[]>([]);\n  const [prompt, setPrompt] = useState<string>('');\n  const [promptToRetry, setPromptToRetry] = useState<string | null>(null);\n  const [uniqueIdToRetry, setUniqueIdToRetry] = useState<string | null>(null);\n  const [modelValue, setModelValue] = useState<ModelValueType>('gpt');\n  const [isLoading, setIsLoading] = useState(false);\n  let loadInterval: number | undefined;\n\n  const generateUniqueId = () => {\n    const timestamp = Date.now();\n    const randomNumber = Math.random();\n    const hexadecimalString = randomNumber.toString(16);\n\n    return `id-${timestamp}-${hexadecimalString}`;\n  }\n\n  const htmlToText = (html: string) => {\n    const temp = document.createElement('div');\n    temp.innerHTML = html;\n    return temp.textContent;\n  }\n\n  const delay = (ms: number) => {\n    return new Promise( resolve => setTimeout(resolve, ms) );\n  }\n\n  const addLoader = (uid: string) => {\n    const element = document.getElementById(uid) as HTMLElement;\n    element.textContent = ''\n\n    // @ts-ignore\n    loadInterval = setInterval(() => {\n      // Update the text content of the loading indicator\n      element.textContent += '.';\n\n      // If the loading indicator has reached three dots, reset it\n      if (element.textContent === '....') {\n        element.textContent = '';\n      }\n    }, 300);\n  }\n\n\n  const addResponse = (selfFlag: boolean, response?: string) => {\n    const uid = generateUniqueId()\n    setResponseList(prevResponses => [\n      ...prevResponses,\n      {\n        id: uid,\n        response,\n        selfFlag\n      },\n    ]);\n    return uid;\n  }\n\n  const updateResponse = (uid: string, updatedObject: Record<string, unknown>) => {\n    setResponseList(prevResponses => {\n      const updatedList = [...prevResponses]\n      const index = prevResponses.findIndex((response) => response.id === uid);\n      if (index > -1) {\n        updatedList[index] = {\n          ...updatedList[index],\n          ...updatedObject\n        }\n      }\n      return updatedList;\n    });\n  }\n\n  const regenerateResponse = async () => {\n    await getGPTResult(promptToRetry, uniqueIdToRetry);\n  }\n\n  const getGPTResult = async (_promptToRetry?: string | null, _uniqueIdToRetry?: string | null) => {\n    // Get the prompt input\n    const _prompt = _promptToRetry ?? htmlToText(prompt);\n\n    // If a response is already being generated or the prompt is empty, return\n    if (isLoading || !_prompt) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    // Clear the prompt input\n    setPrompt('');\n\n    let uniqueId: string;\n    if (_uniqueIdToRetry) {\n      uniqueId = _uniqueIdToRetry;\n    } else {\n      // Add the self prompt to the response list\n      addResponse(true, _prompt);\n      uniqueId = addResponse(false);\n      await delay(50);\n      addLoader(uniqueId);\n    }\n\n    try {\n      // Send a POST request to the API with the prompt in the request body\n      const response = await axios.post('get-prompt-result', {\n        prompt: _prompt,\n        model: modelValue\n      });\n      if (modelValue === 'image') {\n        // Show image for `Create image` model\n        updateResponse(uniqueId, {\n          image: response.data,\n        });\n      } else {\n        updateResponse(uniqueId, {\n          response: response.data.trim(),\n        });\n      }\n\n      setPromptToRetry(null);\n      setUniqueIdToRetry(null);\n    } catch (err) {\n      setPromptToRetry(_prompt);\n      setUniqueIdToRetry(uniqueId);\n      updateResponse(uniqueId, {\n        // @ts-ignore\n        response: `Error: ${err.message}`,\n        error: true\n      });\n    } finally {\n      // Clear the loader interval\n      clearInterval(loadInterval);\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div id=\"response-list\">\n        <PromptResponseList responseList={responseList} key=\"response-list\"/>\n      </div>\n      { uniqueIdToRetry &&\n        (<div id=\"regenerate-button-container\">\n          <button id=\"regenerate-response-button\" className={isLoading ? 'loading' : ''} onClick={() => regenerateResponse()}>\n            Regenerate Response\n          </button>\n        </div>\n        )\n      }\n      <div id=\"model-select-container\">\n        <label htmlFor=\"model-select\">Select model:</label>\n        <select id=\"model-select\" value={modelValue} onChange={(event) => setModelValue(event.target.value as ModelValueType)}>\n          <option value=\"gpt\">GPT-3 (Understand and generate natural language )</option>\n          {/* <option value=\"codex\">Codex (Understand and generate code, including translating natural language to code)\n          </option> */}\n          <option value=\"image\">Create Image (Create AI image using DALL·E models)</option>\n        </select>\n      </div>\n      <div id=\"input-container\">\n        <PromptInput\n          prompt={prompt}\n          onSubmit={() => getGPTResult()}\n          key=\"prompt-input\"\n          updatePrompt={(prompt) => setPrompt(prompt)}\n        />\n        <button id=\"submit-button\" className={isLoading ? 'loading' : ''} onClick={() => getGPTResult()}></button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}