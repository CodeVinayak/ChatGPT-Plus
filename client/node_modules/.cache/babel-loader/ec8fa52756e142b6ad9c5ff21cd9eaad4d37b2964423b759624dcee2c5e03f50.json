{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\Github Local\\\\ChatGPT Plus\\\\client\\\\src\\\\components\\\\PromptResponseList\\\\PromptResponseList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport ChatGptImg from '../../img/chatgpt.png';\nimport MyImg from '../../img/me.png';\nimport ReactMarkdown from 'react-markdown';\nimport hljs from 'highlight.js';\nimport './PromptResponseList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PromptResponseList = _ref => {\n  _s();\n  let {\n    responseList\n  } = _ref;\n  const responseListRef = useRef(null);\n  useEffect(() => {\n    hljs.highlightAll();\n  });\n  useEffect(() => {\n    hljs.highlightAll();\n  }, [responseList]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"prompt-response-list\",\n    ref: responseListRef,\n    children: responseList.map(responseData => {\n      var _responseData$respons;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"response-container \" + (responseData.selfFlag ? 'my-question' : 'chatgpt-response'),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"avatar-image\",\n          src: responseData.selfFlag ? MyImg : ChatGptImg,\n          alt: \"avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: (responseData.error ? 'error-response ' : '') + \"prompt-content\",\n          id: responseData.id,\n          children: [responseData.image && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: responseData.image,\n            className: \"ai-image\",\n            alt: \"generated ai\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 17\n          }, this), responseData.response && /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            children: (_responseData$respons = responseData.response) !== null && _responseData$respons !== void 0 ? _responseData$respons : '',\n            components: {\n              code(_ref2) {\n                let {\n                  className,\n                  children\n                } = _ref2;\n                return /*#__PURE__*/_jsxDEV(\"code\", {\n                  className: className,\n                  children: children\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 39,\n                  columnNumber: 23\n                }, this);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)]\n      }, responseData.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(PromptResponseList, \"g+p/I/WLMJN7ql5VLtxUQ4C4y/M=\");\n_c = PromptResponseList;\nexport default PromptResponseList;\nvar _c;\n$RefreshReg$(_c, \"PromptResponseList\");","map":{"version":3,"names":["React","useEffect","useRef","ChatGptImg","MyImg","ReactMarkdown","hljs","PromptResponseList","responseList","responseListRef","highlightAll","map","responseData","selfFlag","error","id","image","response","code","className","children"],"sources":["D:/Coding/Github Local/ChatGPT Plus/client/src/components/PromptResponseList/PromptResponseList.tsx"],"sourcesContent":["import React, {FC, useEffect, useRef} from 'react';\nimport ChatGptImg from '../../img/chatgpt.png';\nimport MyImg from '../../img/me.png';\nimport ReactMarkdown from 'react-markdown';\nimport {ResponseInterface} from \"./response-interface\";\nimport hljs from 'highlight.js';\nimport './PromptResponseList.css';\n\ninterface PromptResponseListProps {\n  responseList: ResponseInterface[];\n}\n\nconst PromptResponseList: FC<PromptResponseListProps> = ({ responseList }) => {\n  const responseListRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    hljs.highlightAll();\n  })\n\n  useEffect(() => {\n    hljs.highlightAll();\n  }, [responseList]);\n\n  return (\n    <div className=\"prompt-response-list\" ref={responseListRef}>\n      {responseList.map((responseData) => (\n        <div className={\"response-container \" + (responseData.selfFlag ? 'my-question' : 'chatgpt-response')} key={responseData.id}>\n          <img className=\"avatar-image\" src={responseData.selfFlag ? MyImg : ChatGptImg} alt=\"avatar\"/>\n          <div className={(responseData.error ? 'error-response ' : '') + \"prompt-content\"} id={responseData.id}>\n            { responseData.image &&\n                <img src={responseData.image} className=\"ai-image\" alt=\"generated ai\"/>\n            }\n            { responseData.response &&\n              <ReactMarkdown\n                children={responseData.response ?? ''}\n                components={{\n                  code({className, children}) {\n                    return(\n                      <code className={className}>\n                        {children}\n                      </code>\n                    )\n                  }\n                }}\n              />\n            }\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default PromptResponseList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAOC,SAAS,EAAEC,MAAM,QAAO,OAAO;AAClD,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,aAAa,MAAM,gBAAgB;AAE1C,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAO,0BAA0B;AAAC;AAMlC,MAAMC,kBAA+C,GAAG,QAAsB;EAAA;EAAA,IAArB;IAAEC;EAAa,CAAC;EACvE,MAAMC,eAAe,GAAGP,MAAM,CAAiB,IAAI,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACdK,IAAI,CAACI,YAAY,EAAE;EACrB,CAAC,CAAC;EAEFT,SAAS,CAAC,MAAM;IACdK,IAAI,CAACI,YAAY,EAAE;EACrB,CAAC,EAAE,CAACF,YAAY,CAAC,CAAC;EAElB,oBACE;IAAK,SAAS,EAAC,sBAAsB;IAAC,GAAG,EAAEC,eAAgB;IAAA,UACxDD,YAAY,CAACG,GAAG,CAAEC,YAAY;MAAA;MAAA,oBAC7B;QAAK,SAAS,EAAE,qBAAqB,IAAIA,YAAY,CAACC,QAAQ,GAAG,aAAa,GAAG,kBAAkB,CAAE;QAAA,wBACnG;UAAK,SAAS,EAAC,cAAc;UAAC,GAAG,EAAED,YAAY,CAACC,QAAQ,GAAGT,KAAK,GAAGD,UAAW;UAAC,GAAG,EAAC;QAAQ;UAAA;UAAA;UAAA;QAAA,QAAE,eAC7F;UAAK,SAAS,EAAE,CAACS,YAAY,CAACE,KAAK,GAAG,iBAAiB,GAAG,EAAE,IAAI,gBAAiB;UAAC,EAAE,EAAEF,YAAY,CAACG,EAAG;UAAA,WAClGH,YAAY,CAACI,KAAK,iBAChB;YAAK,GAAG,EAAEJ,YAAY,CAACI,KAAM;YAAC,SAAS,EAAC,UAAU;YAAC,GAAG,EAAC;UAAc;YAAA;YAAA;YAAA;UAAA,QAAE,EAEzEJ,YAAY,CAACK,QAAQ,iBACrB,QAAC,aAAa;YACZ,QAAQ,2BAAEL,YAAY,CAACK,QAAQ,yEAAI,EAAG;YACtC,UAAU,EAAE;cACVC,IAAI,QAAwB;gBAAA,IAAvB;kBAACC,SAAS;kBAAEC;gBAAQ,CAAC;gBACxB,oBACE;kBAAM,SAAS,EAAED,SAAU;kBAAA,UACxBC;gBAAQ;kBAAA;kBAAA;kBAAA;gBAAA,QACJ;cAEX;YACF;UAAE;YAAA;YAAA;YAAA;UAAA,QACF;QAAA;UAAA;UAAA;UAAA;QAAA,QAEA;MAAA,GApBmGR,YAAY,CAACG,EAAE;QAAA;QAAA;QAAA;MAAA,QAqBpH;IAAA,CACP;EAAC;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAC,GAvCIR,kBAA+C;AAAA,KAA/CA,kBAA+C;AAyCrD,eAAeA,kBAAkB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}