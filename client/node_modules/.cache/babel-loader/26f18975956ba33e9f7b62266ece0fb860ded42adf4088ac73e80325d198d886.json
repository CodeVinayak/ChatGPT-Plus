{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\Github Local\\\\ChatGPT Plus\\\\client\\\\src\\\\components\\\\App\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport axios from \"axios\";\nimport PromptInput from \"../PromptInput/PromptInput\";\nimport './App.css';\nimport PromptResponseList from \"../PromptResponseList/PromptResponseList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [responseList, setResponseList] = useState([]);\n  const [prompt, setPrompt] = useState('');\n  const [promptToRetry, setPromptToRetry] = useState(null);\n  const [uniqueIdToRetry, setUniqueIdToRetry] = useState(null);\n  const [modelValue, setModelValue] = useState('gpt');\n  const [isLoading, setIsLoading] = useState(false);\n  let loadInterval;\n  const generateUniqueId = () => {\n    const timestamp = Date.now();\n    const randomNumber = Math.random();\n    const hexadecimalString = randomNumber.toString(16);\n    return `id-${timestamp}-${hexadecimalString}`;\n  };\n  const htmlToText = html => {\n    const temp = document.createElement('div');\n    temp.innerHTML = html;\n    return temp.textContent;\n  };\n  const delay = ms => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  };\n  const addLoader = uid => {\n    const element = document.getElementById(uid);\n    element.textContent = '';\n\n    // @ts-ignore\n    loadInterval = setInterval(() => {\n      // Update the text content of the loading indicator\n      element.textContent += '.';\n\n      // If the loading indicator has reached three dots, reset it\n      if (element.textContent === '....') {\n        element.textContent = '';\n      }\n    }, 300);\n  };\n  const addResponse = (selfFlag, response) => {\n    const uid = generateUniqueId();\n    setResponseList(prevResponses => [...prevResponses, {\n      id: uid,\n      response,\n      selfFlag\n    }]);\n    return uid;\n  };\n  const updateResponse = (uid, updatedObject) => {\n    setResponseList(prevResponses => {\n      const updatedList = [...prevResponses];\n      const index = prevResponses.findIndex(response => response.id === uid);\n      if (index > -1) {\n        updatedList[index] = {\n          ...updatedList[index],\n          ...updatedObject\n        };\n      }\n      return updatedList;\n    });\n  };\n  const regenerateResponse = async () => {\n    await getGPTResult(promptToRetry, uniqueIdToRetry);\n  };\n  const getGPTResult = async (_promptToRetry, _uniqueIdToRetry) => {\n    // Get the prompt input\n    const _prompt = _promptToRetry !== null && _promptToRetry !== void 0 ? _promptToRetry : htmlToText(prompt);\n\n    // If a response is already being generated or the prompt is empty, return\n    if (isLoading || !_prompt) {\n      return;\n    }\n    setIsLoading(true);\n\n    // Clear the prompt input\n    setPrompt('');\n    let uniqueId;\n    if (_uniqueIdToRetry) {\n      uniqueId = _uniqueIdToRetry;\n    } else {\n      // Add the self prompt to the response list\n      addResponse(true, _prompt);\n      uniqueId = addResponse(false);\n      await delay(50);\n      addLoader(uniqueId);\n    }\n    try {\n      // Send a POST request to the API with the prompt in the request body\n      const response = await axios.post('get-prompt-result', {\n        prompt: _prompt,\n        model: modelValue\n      });\n      if (modelValue === 'image') {\n        // Show image for `Create image` model\n        updateResponse(uniqueId, {\n          image: response.data\n        });\n      } else {\n        updateResponse(uniqueId, {\n          response: response.data.trim()\n        });\n      }\n      setPromptToRetry(null);\n      setUniqueIdToRetry(null);\n    } catch (err) {\n      setPromptToRetry(_prompt);\n      setUniqueIdToRetry(uniqueId);\n      updateResponse(uniqueId, {\n        // @ts-ignore\n        response: `Error: ${err.message}`,\n        error: true\n      });\n    } finally {\n      // Clear the loader interval\n      clearInterval(loadInterval);\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"response-list\",\n      children: /*#__PURE__*/_jsxDEV(PromptResponseList, {\n        responseList: responseList\n      }, \"response-list\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), uniqueIdToRetry && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"regenerate-button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"regenerate-response-button\",\n        className: isLoading ? 'loading' : '',\n        onClick: () => regenerateResponse(),\n        children: \"Regenerate Response\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"model-select-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"model-select\",\n        children: \"Select model:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"model-select\",\n        value: modelValue,\n        onChange: event => setModelValue(event.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"gpt\",\n          children: \"GPT-3 (Understand and generate natural language )\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"image\",\n          children: \"Create Image (Create AI image using DALL\\xB7E models)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(PromptInput, {\n        prompt: prompt,\n        onSubmit: () => getGPTResult(),\n        updatePrompt: prompt => setPrompt(prompt)\n      }, \"prompt-input\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"submit-button\",\n        className: isLoading ? 'loading' : '',\n        onClick: () => getGPTResult()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"HfsC1dd65syiKC2GiYRoaE5gesc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","axios","PromptInput","PromptResponseList","App","responseList","setResponseList","prompt","setPrompt","promptToRetry","setPromptToRetry","uniqueIdToRetry","setUniqueIdToRetry","modelValue","setModelValue","isLoading","setIsLoading","loadInterval","generateUniqueId","timestamp","Date","now","randomNumber","Math","random","hexadecimalString","toString","htmlToText","html","temp","document","createElement","innerHTML","textContent","delay","ms","Promise","resolve","setTimeout","addLoader","uid","element","getElementById","setInterval","addResponse","selfFlag","response","prevResponses","id","updateResponse","updatedObject","updatedList","index","findIndex","regenerateResponse","getGPTResult","_promptToRetry","_uniqueIdToRetry","_prompt","uniqueId","post","model","image","data","trim","err","message","error","clearInterval","event","target","value"],"sources":["D:/Coding/Github Local/ChatGPT Plus/client/src/components/App/App.tsx"],"sourcesContent":["import {useState} from 'react';\nimport axios from \"axios\";\nimport PromptInput from \"../PromptInput/PromptInput\";\nimport './App.css';\nimport {ResponseInterface} from \"../PromptResponseList/response-interface\";\nimport PromptResponseList from \"../PromptResponseList/PromptResponseList\";\n\ntype ModelValueType = 'gpt' | 'codex' | 'image';\nconst App = () => {\n\n  const [responseList, setResponseList] = useState<ResponseInterface[]>([]);\n  const [prompt, setPrompt] = useState<string>('');\n  const [promptToRetry, setPromptToRetry] = useState<string | null>(null);\n  const [uniqueIdToRetry, setUniqueIdToRetry] = useState<string | null>(null);\n  const [modelValue, setModelValue] = useState<ModelValueType>('gpt');\n  const [isLoading, setIsLoading] = useState(false);\n  let loadInterval: number | undefined;\n\n  const generateUniqueId = () => {\n    const timestamp = Date.now();\n    const randomNumber = Math.random();\n    const hexadecimalString = randomNumber.toString(16);\n\n    return `id-${timestamp}-${hexadecimalString}`;\n  }\n\n  const htmlToText = (html: string) => {\n    const temp = document.createElement('div');\n    temp.innerHTML = html;\n    return temp.textContent;\n  }\n\n  const delay = (ms: number) => {\n    return new Promise( resolve => setTimeout(resolve, ms) );\n  }\n\n  const addLoader = (uid: string) => {\n    const element = document.getElementById(uid) as HTMLElement;\n    element.textContent = ''\n\n    // @ts-ignore\n    loadInterval = setInterval(() => {\n      // Update the text content of the loading indicator\n      element.textContent += '.';\n\n      // If the loading indicator has reached three dots, reset it\n      if (element.textContent === '....') {\n        element.textContent = '';\n      }\n    }, 300);\n  }\n\n\n  const addResponse = (selfFlag: boolean, response?: string) => {\n    const uid = generateUniqueId()\n    setResponseList(prevResponses => [\n      ...prevResponses,\n      {\n        id: uid,\n        response,\n        selfFlag\n      },\n    ]);\n    return uid;\n  }\n\n  const updateResponse = (uid: string, updatedObject: Record<string, unknown>) => {\n    setResponseList(prevResponses => {\n      const updatedList = [...prevResponses]\n      const index = prevResponses.findIndex((response) => response.id === uid);\n      if (index > -1) {\n        updatedList[index] = {\n          ...updatedList[index],\n          ...updatedObject\n        }\n      }\n      return updatedList;\n    });\n  }\n\n  const regenerateResponse = async () => {\n    await getGPTResult(promptToRetry, uniqueIdToRetry);\n  }\n\n  const getGPTResult = async (_promptToRetry?: string | null, _uniqueIdToRetry?: string | null) => {\n    // Get the prompt input\n    const _prompt = _promptToRetry ?? htmlToText(prompt);\n\n    // If a response is already being generated or the prompt is empty, return\n    if (isLoading || !_prompt) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    // Clear the prompt input\n    setPrompt('');\n\n    let uniqueId: string;\n    if (_uniqueIdToRetry) {\n      uniqueId = _uniqueIdToRetry;\n    } else {\n      // Add the self prompt to the response list\n      addResponse(true, _prompt);\n      uniqueId = addResponse(false);\n      await delay(50);\n      addLoader(uniqueId);\n    }\n\n    try {\n      // Send a POST request to the API with the prompt in the request body\n      const response = await axios.post('get-prompt-result', {\n        prompt: _prompt,\n        model: modelValue\n      });\n      if (modelValue === 'image') {\n        // Show image for `Create image` model\n        updateResponse(uniqueId, {\n          image: response.data,\n        });\n      } else {\n        updateResponse(uniqueId, {\n          response: response.data.trim(),\n        });\n      }\n\n      setPromptToRetry(null);\n      setUniqueIdToRetry(null);\n    } catch (err) {\n      setPromptToRetry(_prompt);\n      setUniqueIdToRetry(uniqueId);\n      updateResponse(uniqueId, {\n        // @ts-ignore\n        response: `Error: ${err.message}`,\n        error: true\n      });\n    } finally {\n      // Clear the loader interval\n      clearInterval(loadInterval);\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div id=\"response-list\">\n        <PromptResponseList responseList={responseList} key=\"response-list\"/>\n      </div>\n      { uniqueIdToRetry &&\n        (<div id=\"regenerate-button-container\">\n          <button id=\"regenerate-response-button\" className={isLoading ? 'loading' : ''} onClick={() => regenerateResponse()}>\n            Regenerate Response\n          </button>\n        </div>\n        )\n      }\n      <div id=\"model-select-container\">\n        <label htmlFor=\"model-select\">Select model:</label>\n        <select id=\"model-select\" value={modelValue} onChange={(event) => setModelValue(event.target.value as ModelValueType)}>\n          <option value=\"gpt\">GPT-3 (Understand and generate natural language )</option>\n          {/* <option value=\"codex\">Codex (Understand and generate code, including translating natural language to code)\n          </option> */}\n          <option value=\"image\">Create Image (Create AI image using DALL·E models)</option>\n        </select>\n      </div>\n      <div id=\"input-container\">\n        <PromptInput\n          prompt={prompt}\n          onSubmit={() => getGPTResult()}\n          key=\"prompt-input\"\n          updatePrompt={(prompt) => setPrompt(prompt)}\n        />\n        <button id=\"submit-button\" className={isLoading ? 'loading' : ''} onClick={() => getGPTResult()}></button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}